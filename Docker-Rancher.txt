What is container?

Container is an isolated environment where our applications (or microservice) run having all the dependencies they need attached with them.
-Zero interference
-Required resources and restricted access

Docker - Creating containers
Application containerization

Docker Hub - Public Registry for images
Images - Template-like things used to create containers
Docker Registry - Private repository

Kubernetes - Maintains communication between containers.
K8s - container orchestrator

K8s contains:-
Container
Pods - Pod is a collection of relative containers
Nodes - Node is a collection of CPU and RAM. A machine is a node for us regardless of its type.
Cluster - A group of nodes. We pool the resources of nodes to aggregate the CPU power and RAM
K8s performs scheduling, scaling, service discovery, health checkup, secret management, configuration management

K8s contains:-
etcd database - key-value store
master node(s) - stateless node which actually runs scheduler, controllers and the API server
worker nodes - application runs here

Rancher handles Multi-cloud computing or handles multiple clusters
Rancher - Kubernetes Management Platform
Rancher was able to manage Docker Swarm, Mesos(Marathon) as well as Cattle containers.
Nowadays, only K8s and cattle is supported
Rancher API - Management server (cluster controller) + worker hosts (cluster agent)
Worker hosts can create, modify and delete containers
Management server can modify services

Rancher API server has been built on top of K8s API and etcd database
-User management
-Authorization
-Projects
-Node Tracking

Cluster Controller
It implements business logic to manage K8s.
- Implementing logic for global Rancher install
- Implementing logic for separate clusters

Authentication Proxy


Docker Swarm <-> Kubernetes <->Mesos

1. Rancher is 100% open source
2. Multi-cluster mgmt
3. Unified operations
4. Centralized policy mgmt
5. Authetication and RBAC, LDAP and Active Directories
6. UI
7. Integrated tooling

DC/OS - Datacenter Operating System
DC/OS is a distributed operating system based on Apache Mesos (distributed systems kernel)
DC/OS enables the management of multiple machines as if they were a single machine
-Resource management
-Process scheduling
-Inter-process communication
-Simplifies installation and mgmt of distributed services

Cisco, Yelp, Tommy Hilfiger,Uber, Netflix, Verizon


Command to install Rancher on Digital Ocean:-

#!/bin/bash

docker run -d --restart=always -p 8080:8080 rancher/server 


Steps to install rancher on aws
1. Create a free tier account
2. Set a budget
3. Launch EC2 instance
4. Select Ubuntu (free tier eligible) as AMI for virtual machine
5. Select t2.micro as instance type
6. Configure instance > Advanced details > user data :-
#!/bin/bash

wget -qO- https://get.docker.com/ | sh
docker run -d --name <application-name> --restart=always -p 8080:8080 rancher/server:stable
docker logs -f <application-name>

7. Configure security group > Add rules
TCP port 22, 80, 443, 8080
UDP port 500, 4500

8. Launch > Create key pair > Download .pem file > Launch instance

9. Go to EC2 console. Wait for the machine to start running.

10. Go to the public ip address of instance
http://ec2-3-83-103-135.compute-1.amazonaws.com:8080

11. To launch a worker host on aws using rancher UI,
-Create an IAM user and get hold of secondary userid and password
-Check the box of programmatic access
-On permissions page, attach existing policies > Find AmazonEC2FullAcces > Create user
-Copy paste your access key id and secret key to Rancher UI
-Authenticate and select a network
-Select vpc as network
-Select rancher-machine as the security group


Note -> Don't forget to terminate machine if you were working in dev env
Delete key pair and security group as well from ec2 dashboard


For using RancherOS:-
1. Install Docker Toolbox
2. Open Docker CLI
3. Create a VM having RancherOS as guestOS
docker-machine create -d virtualbox --virtualbox-boot2docker-url https://releases.rancher.com/os/latest/rancheros.iso --virtualbox-memory 2048 <machine-name>
4. Create a connection from docker CLI to VM
docker-machine ssh <machine-name>
Check the version of rancheros -> sudo ros -v
5. Check the system containers
sudo system-docker ps
6. Run your own container on Docker
docker run -d nginx
7. Check the container 
docker ps
8. Run a system services container
sudo system-docker run -d --net=host --name busydash husseingalal/busydash
sudo system-docker ps
Press Ctrl+D
docker-machine ip machine1
Go to browser and paste ip address -> Linux dash will load
9. Switch your console
sudo ros console switch ubuntu
sudo system-docker ps
10. Direct your CLI towards Docker Daemon of VM
eval $(docker-machine env machine1)


To list running VMs-
docker-machine ls
To stop a VM-
docker machine kill <machine-name>
To remove a VM-
docker-machine rm <machine-name>
To see build logs for rancher server-
docker run -d --name myrancher --restart=always -p 8080:8080 rancher/server
sudo docker logs -f myrancher
To check the version:-
docker --version
To remove docker completely:-
sudo apt-get purge docker-ce
sudo rm -rf var/lib/docker
To remove image
sudo docker rmi <image-id>
To interact with your container:-
sudo docker run -it --rm <image>
To check running containers:
docker ps
To check all the containers
docker ps -a

Creating your own image
1. Create a container
- sudo docker run -it debian:jessie
2. Install git
- git
- apt-get update && apt-get install -y git
3. Create image from your container
- exit
- docker images
- docker commit <name-of-image> myimage:v0.2.0
- docker images
4. Create another container using your image
- sudo docker run -it myimage:v0.2.0









Please take this survey :)
https://goo.gl/forms/33Exx576vi2r1dSd2
